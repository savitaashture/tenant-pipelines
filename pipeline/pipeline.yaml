---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: a-pipeline
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: Useful Pipeline
  params:
    - name: released_version
      type: string
    - name: snapshot
      type: string
  tasks:
    - name: create-tag
      params:
        - name: RELEASED_VERSION
          value: "$(params.released_version)"
        - name: SNAPSHOT
          value: "$(params.snapshot)"
      taskSpec:
        params:
          - name: RELEASED_VERSION
            type: string
          - name: SNAPSHOT
            type: string
        steps:
          - name: create-tag
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eo pipefail

              echo $(params.RELEASED_VERSION)
              get-resource "snapshot" $(params.SNAPSHOT) > /tmp/snapshot.json
              cat /tmp/snapshot.json
              file="/tmp/snapshot.json"

              match_words=("openshift-pipelines-pipelines-triggers-webhook-rhel8" "openshift-pipelines-pipelines-triggers-controller-rhel8" 
              "openshift-pipelines-pipelines-triggers-core-interceptors-rhel8" "openshift-pipelines-pipelines-triggers-eventlistenersink-rhel8")

              container_images=()

              while IFS= read -r image; do
              container_images+=("$image")
              done < <(jq -r '.spec.components[].containerImage' "$file")

              for container_image in "${container_images[@]}"; do
                # Extract the word before sha256 to match with the container image to push
                last_word=$(echo "$container_image" | sed -E 's|.*/([^/]+)@sha256:.*|\1|')
                # sha256=$(echo "$container_image" | sed -E 's|.*@sha256:([^ ]*)|\1|')
                
                for match_word in "${match_words[@]}"; do

                  # Check if the word before sha256 matches the specified match_word
                  if [[ "$match_word" =~ $last_word ]]; then
                      # Construct the new image name with the new registry
                      new_image="quay.io/openshift-pipeline/$match_word:next"
                      echo "Pushing Docker image: $new_image"
                      skopeo copy docker://"$container_image" docker://"$new_image" --all
                  fi
                done
              done

