---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: pipelines-pipeline-next
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: Pipeline to push built images to quay registry for nightly build
  params:
    - name: released_version
      type: string
    - name: snapshot
      type: string
  tasks:
    - name: create-tag
      params:
        - name: RELEASED_VERSION
          value: "$(params.released_version)"
        - name: SNAPSHOT
          value: "$(params.snapshot)"
      taskSpec:
        params:
          - name: RELEASED_VERSION
            type: string
          - name: SNAPSHOT
            type: string
        steps:
          - name: create-tag
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eo pipefail
              echo $(params.RELEASED_VERSION)
              get-resource "snapshot" $(params.SNAPSHOT) > /tmp/snapshot.json
              cat /tmp/snapshot.json
              file="/tmp/snapshot.json"
              #container_images=()
              #while IFS= read -r image; do
              #container_images+=("$image")
              #done < <(jq -r '.spec.components[].containerImage' "$file")

              container_images=($(jq -r '.spec.components[].containerImage' "$file"))


              for container_image in "${container_images[@]}"; do
                image=$(echo "$container_image" | sed "s|quay.io/redhat-user-workloads/tekton-ecosystem-tenant|quay.io/openshift-pipeline|")
                image_no_sha=$(echo "$image" | sed 's/@sha256:.*//')
                IFS="/" read -r -a parts <<< "$image_no_sha"
                new_image="quay.io/openshift-pipeline/${parts[2]}-${parts[3]}:next"
                echo "$new_image"
                skopeo copy docker://"$container_image" docker://"$new_image" --all --preserve-digests
              done
